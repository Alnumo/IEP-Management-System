{
  "name": "Performance Alert Processing & Rule Evaluation", 
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minute",
              "triggerAtMinute": 5
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Every 5 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM evaluate_alert_rules()",
        "additionalFields": {}
      },
      "id": "evaluate-rules",
      "name": "Evaluate Alert Rules",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-db",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$json.triggered}}",
              "value2": true
            }
          ]
        }
      },
      "id": "if-triggered",
      "name": "Rule Triggered?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT create_alert_from_rule(\n  $1::uuid,\n  $2::numeric,\n  $3::jsonb\n) as alert_id",
        "additionalFields": {
          "mode": "independently", 
          "queryParameters": "={{JSON.stringify([$json.rule_id, $json.metric_value, {\"evaluation_timestamp\": new Date().toISOString(), \"n8n_execution_id\": $workflow.id}])}}"
        }
      },
      "id": "create-alert",
      "name": "Create Alert",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [900, 200],
      "credentials": {
        "postgres": {
          "id": "supabase-db",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.alert_id}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "if-alert-created",
      "name": "Alert Created?",
      "type": "n8n-nodes-base.if", 
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT schedule_alert_notifications($1::uuid) as notifications_scheduled",
        "additionalFields": {
          "mode": "independently",
          "queryParameters": "={{JSON.stringify([$json.alert_id])}}"
        }
      },
      "id": "schedule-notifications",
      "name": "Schedule Notifications",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1340, 100],
      "credentials": {
        "postgres": {
          "id": "supabase-db",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  ad.*,\n  nc.channel_name,\n  nc.channel_type,\n  nc.config,\n  pa.alert_type,\n  pa.severity,\n  pa.metric_name,\n  pa.threshold_value,\n  pa.actual_value,\n  pa.alert_data,\n  pa.created_at as alert_created_at\nFROM alert_deliveries ad\nJOIN notification_channels nc ON ad.channel_id = nc.id\nJOIN performance_alerts pa ON ad.alert_id = pa.id\nWHERE ad.delivery_status IN ('pending', 'retrying')\nAND nc.enabled = true\nORDER BY ad.created_at ASC\nLIMIT 50",
        "additionalFields": {}
      },
      "id": "get-pending-deliveries",
      "name": "Get Pending Deliveries", 
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [460, 500],
      "credentials": {
        "postgres": {
          "id": "supabase-db",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-deliveries",
      "name": "Split Deliveries",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [680, 500]
    },
    {
      "parameters": {
        "url": "http://localhost:5678/webhook/alerts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "type",
              "value": "={{$json.channel_type}}"
            },
            {
              "name": "channel",
              "value": "={\"id\": \"{{$json.channel_id}}\", \"name\": \"{{$json.channel_name}}\", \"type\": \"{{$json.channel_type}}\", \"config\": {{$json.config}}}"
            },
            {
              "name": "to",
              "value": "={{$json.recipient}}"
            },
            {
              "name": "subject",
              "value": "Performance Alert: {{$json.alert_type}}"
            },
            {
              "name": "body", 
              "value": "**{{$json.severity.toUpperCase()}} Alert**\\n\\nüìä **Metric:** {{$json.metric_name}}\\nüìà **Current Value:** {{$json.actual_value}}\\n‚ö†Ô∏è **Threshold:** {{$json.threshold_value}}\\n‚è∞ **Time:** {{new Date($json.alert_created_at).toLocaleString()}}\\n\\n{{$json.alert_data.description || $json.alert_type}}"
            },
            {
              "name": "message",
              "value": "*{{$json.severity.toUpperCase()}} Performance Alert*\\n\\nüìä *Metric:* {{$json.metric_name}}\\nüìà *Current Value:* {{$json.actual_value}}\\n‚ö†Ô∏è *Threshold:* {{$json.threshold_value}}\\n‚è∞ *Time:* {{new Date($json.alert_created_at).toLocaleString()}}\\n\\n{{$json.alert_data.description || $json.alert_type}}"
            },
            {
              "name": "alert",
              "value": "={\"id\": \"{{$json.alert_id}}\", \"type\": \"{{$json.alert_type}}\", \"severity\": \"{{$json.severity}}\", \"metric_name\": \"{{$json.metric_name}}\", \"actual_value\": {{$json.actual_value}}, \"threshold_value\": {{$json.threshold_value}}, \"created_at\": \"{{$json.alert_created_at}}\"}"
            }
          ]
        },
        "options": {}
      },
      "id": "deliver-notification",
      "name": "Deliver Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DELETE FROM performance_metrics \nWHERE created_at < NOW() - INTERVAL '7 days';\n\nDELETE FROM alert_deliveries \nWHERE delivery_status = 'sent' \nAND delivered_at < NOW() - INTERVAL '30 days';\n\nDELETE FROM alert_rule_evaluations \nWHERE created_at < NOW() - INTERVAL '14 days';",
        "additionalFields": {}
      },
      "id": "cleanup-old-data",
      "name": "Cleanup Old Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [460, 700],
      "credentials": {
        "postgres": {
          "id": "supabase-db",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_health_metrics (metric_name, metric_value, metadata, created_at)\nVALUES \n  ('alert_rules_evaluated', (SELECT COUNT(*) FROM alert_rules WHERE enabled = true), '{\"source\": \"n8n_workflow\"}', NOW()),\n  ('pending_deliveries', (SELECT COUNT(*) FROM alert_deliveries WHERE delivery_status IN ('pending', 'retrying')), '{\"source\": \"n8n_workflow\"}', NOW()),\n  ('active_alerts', (SELECT COUNT(*) FROM performance_alerts WHERE resolved_at IS NULL), '{\"source\": \"n8n_workflow\"}', NOW())",
        "additionalFields": {}
      },
      "id": "log-health-metrics",
      "name": "Log Health Metrics",
      "type": "n8n-nodes-base.postgres", 
      "typeVersion": 2,
      "position": [1340, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-db",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll",
        "options": {}
      },
      "id": "merge-results",
      "name": "Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "schedule-trigger": {
      "main": [
        [
          {
            "node": "evaluate-rules",
            "type": "main",
            "index": 0
          },
          {
            "node": "get-pending-deliveries",
            "type": "main",
            "index": 0
          },
          {
            "node": "cleanup-old-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "evaluate-rules": {
      "main": [
        [
          {
            "node": "if-triggered",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if-triggered": {
      "main": [
        [
          {
            "node": "create-alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create-alert": {
      "main": [
        [
          {
            "node": "if-alert-created",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if-alert-created": {
      "main": [
        [
          {
            "node": "schedule-notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schedule-notifications": {
      "main": [
        [
          {
            "node": "merge-results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-pending-deliveries": {
      "main": [
        [
          {
            "node": "split-deliveries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "split-deliveries": {
      "main": [
        [
          {
            "node": "deliver-notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "deliver-notification": {
      "main": [
        [
          {
            "node": "log-health-metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleanup-old-data": {
      "main": [
        [
          {
            "node": "log-health-metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "log-health-metrics": {
      "main": [
        [
          {
            "node": "merge-results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "Asia/Riyadh",
    "saveManualExecutions": true,
    "callerPolicy": "workflowOwner",
    "errorPolicy": "continueErrorOutput",
    "executionTimeout": 300
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "alert-processing",
  "tags": [
    {
      "createdAt": "2025-09-02T10:00:00.000Z",
      "updatedAt": "2025-09-02T10:00:00.000Z", 
      "id": "alerts",
      "name": "alerts"
    },
    {
      "createdAt": "2025-09-02T10:00:00.000Z",
      "updatedAt": "2025-09-02T10:00:00.000Z",
      "id": "automation",
      "name": "automation"
    }
  ]
}